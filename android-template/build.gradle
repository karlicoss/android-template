buildscript {
    repositories {
        jcenter()
    }
}

apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.github.karlicoss.template"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'

        jackOptions {
            enabled true
        }
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    compile libraries.rxJava

    testCompile libraries.junit
    testCompile libraries.assertJ
    testCompile libraries.robolectric
}

apply plugin: 'findbugs'

task findbugs(type: FindBugs, dependsOn: assembleDebug) {
    excludeFilter project.rootProject.file('config/findbugs/suppressions.xml')

    ignoreFailures = false
    effort = 'max'
    reportLevel = 'low'

    classes = project.fileTree('build/intermediates/classes/')
    classpath = project.files(project.configurations.testCompile)
    source = project.files('src')

    reports {
        xml {
            enabled = false
            withMessages = true
        }
        // For some reason, only one type report is allowed
        // If you want to get a human readable report HTML report, just disable XML
        html {
            enabled = !xml.enabled
        }
    }
}

configurations {
    checkerFrameworkJavac {
        description = 'a customization of the OpenJDK javac compiler with additional support for type annotations'
    }
    checkerFrameworkAnnotatedJDK {
        description = 'a copy of JDK classes with Checker Framework type qualifers inserted'
    }
    checkerFramework {
        description = 'The Checker Framework: custom pluggable types for Java'
    }
}

dependencies {
    ext.checkerFrameworkVersion = '2.1.5'
    ext.jdkVersion = JavaVersion.current().isJava7() ? 'jdk7' : 'jdk8'
    checkerFrameworkAnnotatedJDK "org.checkerframework:${jdkVersion}:${checkerFrameworkVersion}"
    checkerFrameworkJavac "org.checkerframework:compiler:${checkerFrameworkVersion}"
    checkerFramework "org.checkerframework:checker:${checkerFrameworkVersion}"
    compile "org.checkerframework:checker-qual:${checkerFrameworkVersion}"
    compile 'org.jetbrains:annotations:15.0'
    compile files('/L/repos/checker-framework/checker/examples/GradleExamples/GradleJava8Example/build/libs/GradleJava8Example-1.0-SNAPSHOT.jar')
    checkerFrameworkJavac files('/L/repos/checker-framework/checker/examples/GradleExamples/GradleJava8Example/build/libs/GradleJava8Example-1.0-SNAPSHOT.jar')
    checkerFramework files('/L/repos/checker-framework/checker/examples/GradleExamples/GradleJava8Example/build/libs/GradleJava8Example-1.0-SNAPSHOT.jar')
}


def typecheck = project.properties['typecheck'] ?: false
allprojects {
    if (typecheck) {
        gradle.projectsEvaluated {
            tasks.withType(JavaCompile).all { JavaCompile compile ->
                compile.options.compilerArgs = [
                        '-processor', 'org.checkerframework.checker.fenum.FenumChecker',
                        '-Aquals=org.checkerframework.example.FolderId',
                        '-processorpath', "${configurations.checkerFramework.asPath}",
                        // uncomment to turn Checker Framework errors into warnings
                        //'-Awarns',
                        "-Xbootclasspath/p:${configurations.checkerFrameworkAnnotatedJDK.asPath}"
                ]
                compile.options.compilerArgs += ['-source', '8', '-target', '8'] // , '-AprintErrorStack']
                options.bootClasspath = System.getProperty("sun.boot.class.path") + ":" + options.bootClasspath
                options.bootClasspath = "${configurations.checkerFrameworkJavac.asPath}:" + ":" + options.bootClasspath
                options.fork = false
                options.forkOptions.jvmArgs += ["-Xbootclasspath/p:${configurations.checkerFrameworkJavac.asPath}"]
            }
        }
    }
}

import com.github.karlicoss.gradlestuff.GradleDemoPlugin

apply plugin: GradleDemoPlugin